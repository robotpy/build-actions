---
name: Package CI

on:
  workflow_call:
    inputs:
      enable_rtd:
        required: false
        default: true
        type: boolean
      enable_sphinx_check:
        required: false
        default: true
        type: boolean
      enable_raspbian:
        required: false
        default: true
        type: boolean
      enable_roborio:
        required: false
        default: true
        type: boolean
      osx_target:
        required: false
        default: ''
        type: string
      matrix_os:
        required: false
        default: >-
          ["ubuntu-22.04", "macos-11", "windows-2022"]
        type: string
      fail_fast:
        required: false
        default: true
        type: boolean
      default_branch:
        required: false
        default: 'main'
        type: string
    secrets:
      SSH_USER:
        description: User to SFTP as
      SSH_KEY:
        description: Private key
      SSH_PASSPHRASE:
        description: Decryption passphrase for private key
      META_REPO_ACCESS_TOKEN:
        description: Token to use to trigger bump workflow on robotpy-meta
      RTD_TOKEN:
        description: Token to trigger ReadTheDocs webhook
      RTD_WEBHOOK:
        description: ReadTheDocs webhook URL
      PYPI_API_TOKEN:
        description: Token to publish the package to PyPI

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:

  # This job limits concurrency on the default branch
  # - we want it to run so it can populate ccache, but we typically
  #   don't care about when it completes, so limit its concurrency
  #   to stop eating up valuable + slow Windows/macOS runners
  setup_concurrency:
    runs-on: ubuntu-latest
    outputs:
      max-parallel: ${{ steps.max-parallel.outputs.p }}
    steps:
    - name: Setup concurrency
      shell: bash
      id: max-parallel
      run: |
        if [[ "${{ github.ref_name }}" == "${{ inputs.default_branch }}" ]]; then
          echo "PARALLEL=1"
          echo "p={\"v\": 1}" >> $GITHUB_OUTPUT
        else
          echo "PARALLEL=10000"
          echo "p={\"v\": 10000}" >> $GITHUB_OUTPUT
        fi

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: psf/black@stable

  #
  # Build native wheels
  #

  build:
    runs-on: ${{ matrix.os }}
    needs: [setup_concurrency]
    strategy:
      max-parallel: ${{ fromJSON(needs.setup_concurrency.outputs.max-parallel).v }}
      fail-fast: ${{ inputs.fail_fast }}
      matrix: 
        os: ${{ fromJSON(inputs.matrix_os) }}
        python_version:
        - '3.7'
        - '3.8'
        - '3.9'
        - '3.10'
        - '3.11'

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}

    - name: Set ccache variant
      shell: bash
      id: ccache
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "VARIANT=sccache" >> $GITHUB_OUTPUT
          echo "RPYBUILD_CC_LAUNCHER=sccache" >> $GITHUB_ENV
        else
          echo "VARIANT=ccache" >> $GITHUB_OUTPUT
          echo "RPYBUILD_CC_LAUNCHER=ccache" >> $GITHUB_ENV
        fi

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
          key: ${{ matrix.os }}-${{ matrix.python_version }}
          variant: ${{ steps.ccache.outputs.variant }}

    - uses: robotpy/build-actions/install-robotpy-build@v2023
    - uses: robotpy/build-actions/install-build-deps@v2023
    - uses: robotpy/build-actions/build-wheel@v2023
      with:
        osx_target: ${{ inputs.osx_target }}

    - name: Show installed packages
      shell: bash
      run: |
        python -m pip list

    - uses: robotpy/build-actions/test-native-wheel@v2023

    - uses: robotpy/build-actions/validate-sphinx@v2023
      if: |
        inputs.enable_sphinx_check && inputs.enable_rtd &&
        matrix.python_version == '3.11' && runner.os == 'Linux' &&
        github.event_name == 'pull_request'

    - uses: actions/upload-artifact@v3
      with:
        name: "dist-${{ runner.os }}"
        path: dist

  #
  # Build roboRIO/raspbian wheels
  #

  cross-build:
    runs-on: ubuntu-latest
    needs: [setup_concurrency]
    strategy:
      max-parallel: ${{ fromJSON(needs.setup_concurrency.outputs.max-parallel).v }}
      matrix:
        os:
        - container: robotpy/roborio-cross-ubuntu:2023.2
          name: roborio
        - container: robotpy/raspbian-cross-ubuntu:2023.3-arm32
          name: raspbian
        - container: robotpy/raspbian-cross-ubuntu:2023.3-aarch64
          name: raspbian

    container:
      image: "${{ matrix.os.container }}"

    steps:
    - uses: actions/checkout@v3
      if: (inputs.enable_raspbian && matrix.os.name == 'raspbian') || (inputs.enable_roborio && matrix.os.name == 'roborio')

    - name: Set ccache env
      shell: bash
      run: |
        echo "RPYBUILD_CC_LAUNCHER=ccache" >> $GITHUB_ENV

    - run: apt-get update
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
          key: ${{ matrix.os.container }}
          variant: ccache

    - uses: robotpy/build-actions/install-robotpy-build@v2023
      if: (inputs.enable_raspbian && matrix.os.name == 'raspbian') || (inputs.enable_roborio && matrix.os.name == 'roborio')
      with:
        python: /build/venv/bin/cross-python
    - uses: robotpy/build-actions/install-build-deps@v2023
      if: (inputs.enable_raspbian && matrix.os.name == 'raspbian') || (inputs.enable_roborio && matrix.os.name == 'roborio')
      with:
        python: /build/venv/bin/cross-python
        wheeldir: ${{ matrix.os.name }}

    - name: Show installed packages
      shell: bash
      run: |
        /build/venv/bin/build-python -m pip list
        /build/venv/bin/cross-python -m pip list

    # See https://github.com/pypa/setuptools_scm/issues/784
    - name: Set git directory as safe to allow setuptools-scm to work
      shell: bash
      run: |
        pwd
        /usr/bin/git config --global --add safe.directory $(pwd)

    - uses: robotpy/build-actions/build-wheel@v2023
      if: (inputs.enable_raspbian && matrix.os.name == 'raspbian') || (inputs.enable_roborio && matrix.os.name == 'roborio')
      with:
        python: /build/venv/bin/cross-python

    - uses: actions/upload-artifact@v3
      if: (inputs.enable_raspbian && matrix.os.name == 'raspbian') || (inputs.enable_roborio && matrix.os.name == 'roborio')
      with:
        name: dist-${{ matrix.os.name }}
        path: dist

  #
  # Publish wheels to robotpy site, pypi
  #

  publish-rpyrepo:
    runs-on: ubuntu-latest
    needs: [check, build, cross-build]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

    steps:

    #
    # RoboRIO wheel
    #

    - uses: actions/download-artifact@v3
      if: inputs.enable_roborio
      with:
        name: dist-roborio
        path: dist-roborio/

    - uses: robotpy/github-action-scp@atomic
      if: inputs.enable_roborio
      with:
        local: dist-roborio
        remote: public_html/2023/roborio
        host: narya.tortall.net
        username: ${{ secrets.SSH_USER }}
        privateKey: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        atomicPut: true

    #
    # Raspbian wheel
    #

    - uses: actions/download-artifact@v3
      if: inputs.enable_raspbian
      with:
        name: dist-raspbian
        path: dist-raspbian/

    - uses: robotpy/github-action-scp@atomic
      if: inputs.enable_raspbian
      with:
        local: dist-raspbian
        remote: public_html/2023/raspbian
        host: narya.tortall.net
        username: ${{ secrets.SSH_USER }}
        privateKey: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        atomicPut: true


  publish-pypi:
    runs-on: ubuntu-latest
    needs: [check, build, cross-build]
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      if: ${{ contains(inputs.matrix_os, 'windows-2019' ) }}
      with:
        name: dist-Windows
        path: dist/
    
    - uses: actions/download-artifact@v3
      if: ${{ contains(inputs.matrix_os, 'windows-2022' ) }}
      with:
        name: dist-Windows
        path: dist/

    - uses: actions/download-artifact@v3
      if: ${{ contains(inputs.matrix_os, 'macos-10.15' ) }}
      with:
        name: dist-macOS
        path: dist/

    - uses: actions/download-artifact@v3
      if: ${{ contains(inputs.matrix_os, 'macos-11' ) }}
      with:
        name: dist-macOS
        path: dist/

    - uses: actions/download-artifact@v3
      if: ${{ contains(inputs.matrix_os, 'ubuntu-22.04' ) }}
      with:
        name: dist-Linux
        path: dist/

    - uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - uses: robotpy/build-actions/install-robotpy-build@v2023
    - uses: robotpy/build-actions/build-sdist@v2023

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        verify_metadata: false

  ping-rtd:
    runs-on: ubuntu-latest
    needs: [check, build, cross-build]
    if: |
      inputs.enable_rtd && github.event_name == 'push' &&
      (startsWith(github.event.ref, 'refs/tags') || github.event.ref == 'refs/heads/main')
    steps:
    - name: Sleep 1 minute to allow artifact upload
      shell: bash
      run: sleep 60
    - name: Ping readthedocs
      uses: robotpy/build-actions/ping-rtd@v2023
      with:
        token: ${{ secrets.RTD_TOKEN }}
        webhook: ${{ secrets.RTD_WEBHOOK }}

  # ping:
  #   runs-on: ubuntu-latest
  #   needs: [publish-rpyrepo, publish-pypi]
  #   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

  #   steps:
  #   - uses: robotpy/build-actions/ping-meta@v2023
  #     with:
  #       token: ${{ secrets.META_REPO_ACCESS_TOKEN }}
